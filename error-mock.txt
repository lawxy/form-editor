{
  "formElements": [
    {
      "type": "button",
      "btnText": "按钮",
      "elementName": "按钮",
      "gridSpan": 2,
      "id": "el-cc694ulmhr",
      "events": [
        {
          "id": "event-q8u7se9gdo8",
          "eventAction": "onClick",
          "eventTargets": [
            {
              "id": "event-target-m9ilujkahq8",
              "sourceId": "el-cc694ulmhr",
              "targetServiceId": "service-nneenc6ovc8",
              "targetPayload": "clear",
              "refreshFlag": 1,
              "delayType": "debounce",
              "delayTime": 1000,
              "series": true
            },
            {
              "id": "event-target-nu9khnc1s08",
              "sourceId": "el-cc694ulmhr",
              "targetServiceId": "service-c32dsu8jfq8",
              "targetPayload": "clear",
              "refreshFlag": 1
            }
          ],
          "eventType": "refreshService"
        }
      ]
    }
  ],
  "fieldValues": {},
  "formAttrs": {
    "horizontalGap": 8,
    "verticalGap": 8,
    "customCss": "#form {\n\tpadding: 10px;\n}"
  },
  "formServices": [
    {
      "name": "timeout",
      "url": "http://localhost:8888/timeout",
      "method": "GET",
      "interceptors": "axios.interceptors.request.use(config =>{\n  return config\n})\n\nconst DEFAULT_ERROR_MESSAGE = '请求服务报错';\n\nconst HttpStatusCode = { Ok: 200 };\n\naxios.interceptors.response.use(function (res) {\n  try {\n    if (res.status !== HttpStatusCode.Ok) {\n      message.error(DEFAULT_ERROR_MESSAGE);\n      return {};\n    }\n    const { code } = res.data;\n    if (HttpStatusCode.Ok === code) {\n      return res.data;\n    }\n    message.error(errMsg || DEFAULT_ERROR_MESSAGE);\n  } catch (e) {\n    message.error(DEFAULT_ERROR_MESSAGE);\n  }\n},\nfunction (err) {\n  message.error(err?.message || DEFAULT_ERROR_MESSAGE);\n  return Promise.reject(err);\n})\n",
      "id": "service-nneenc6ovc8"
    },
    {
      "name": "other",
      "url": "http://localhost:8888/code",
      "method": "GET",
      "interceptors": "axios.interceptors.request.use(config =>{\n  return config\n})\n\nconst DEFAULT_ERROR_MESSAGE = '请求服务报错';\n\nconst HttpStatusCode = { Ok: 200 };\n\naxios.interceptors.response.use(function (res) {\n  try {\n    if (res.status !== HttpStatusCode.Ok) {\n      message.error(DEFAULT_ERROR_MESSAGE);\n      return {};\n    }\n    const { code } = res.data;\n    if ('000000' === code) {\n      return res.data;\n    }\n    message.error(errMsg || DEFAULT_ERROR_MESSAGE);\n  } catch (e) {\n    message.error(DEFAULT_ERROR_MESSAGE);\n  }\n},\nfunction (err) {\n  message.error(err?.message || DEFAULT_ERROR_MESSAGE);\n  return Promise.reject(err);\n})\n",
      "id": "service-c32dsu8jfq8"
    }
  ]
}